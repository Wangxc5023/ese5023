Temp           <- var.get.nc(ex.nc,"Met_T")
dim(Temp)
close.nc(ex.nc)
ex.nc	         <- open.nc("/home/lei/Desktop/GCHP.StateMet_avg.20170101_1200z.nc4")
Temp           <- var.get.nc(ex.nc,"Met_T")
dim(Temp)
close.nc(ex.nc)
ex.nc	         <- open.nc("/home/lei/Desktop/GCHP.Aerosols.20170103_0830z.nc4")
AODDust        <- var.get.nc(ex.nc,"AODDust")
dim(AODDust)
close.nc(ex.nc)
ex.nc	         <- open.nc("/home/lei/Desktop/GCHP.Aerosols.20170101_1200z.nc4")
AODDust        <- var.get.nc(ex.nc,"AODDust")
dim(AODDust)
close.nc(ex.nc)
ex.nc	         <- open.nc("/home/lei/Desktop/GCHP.SpeciesConc.20170103_2330z.nc4")
HCHO           <- var.get.nc(ex.nc,"SpeciesConc_CH2O")
dim(HCHO)
print.nc(ex.nc)
GC_lat         <- var.get.nc(ex.nc,"lat")
GC_lon         <- var.get.nc(ex.nc,"lon")
dim(HCHO)
close.nc(ex.nc)
GC_lat
GC_lon
dim(HCHO)
length(GC_lat)
dim(HCHO)
image.plot(GC_lon, GC_lat,HCHO[,,1],
horizontal=T,legend.shrink=1,axis.args = list(cex.axis =1,padj=-1.75,tck=0.2),
legend.width=1,legend.mar=1,
legend.args=list(text=expression(paste("log(HCHO fire emission) [log(g/m2/hr)]",sep="")),padj=0.15,cex=1),
xlab='',ylab='',midpoint=T,axes=F,ann=F)
title(xlab="",cex.lab=1.25,font.lab=2)
GC_lon
GC_lat
image.plot(GC_lon, GC_lat,HCHO[,,1],
horizontal=T,legend.shrink=1,axis.args = list(cex.axis =1,padj=-1.75,tck=0.2),
legend.width=1,legend.mar=1,
legend.args=list(text=expression(paste("log(HCHO fire emission) [log(g/m2/hr)]",sep="")),padj=0.15,cex=1),
xlab='',ylab='',midpoint=T,axes=F,ann=F)
title(xlab="",cex.lab=1.25,font.lab=2)
#---> Load libraies
library(RNetCDF);library(fields); library(maps)
image.plot(GC_lon, GC_lat,HCHO[,,1],
horizontal=T,legend.shrink=1,axis.args = list(cex.axis =1,padj=-1.75,tck=0.2),
legend.width=1,legend.mar=1,
legend.args=list(text=expression(paste("log(HCHO fire emission) [log(g/m2/hr)]",sep="")),padj=0.15,cex=1),
xlab='',ylab='',midpoint=T,axes=F,ann=F)
title(xlab="",cex.lab=1.25,font.lab=2)
title(xlab="",cex.lab=1.25,font.lab=2)
axis(1,at=pretty(GC_lon),tck=0.015,lwd=1.5,cex.axis=1,font=1,padj=-1.5)
axis(4,at=pretty(GC_lat),tck=0.015,lwd=1.5,labels=F)
axis(2,at=pretty(GC_lat),tck=0.015,lwd=1.5,labels=F)
#///////////////////////////////////////////////////////////////////////////////////////////
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#                                 Main script for validation                              ++
#                         Lei Zhu (leizhu@fas.harvard.edu), 01/29/2019                    ++
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#///////////////////////////////////////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////////////////////////////////////
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#                                      STEP 1                                             ++
#                              Load library and tools                                     ++
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#///////////////////////////////////////////////////////////////////////////////////////////
#---> Load libraies
library(fields); library(rhdf5); library(SDMTools); library(RNetCDF); library(lubridate)
library(akima)
library(fields);
library(SDMTools);
library(RNetCDF);
library(lubridate)
library(akima)
library(rhdf5);
install.packages("BiocManager")
BiocManager::install("rhdf5")
ls()
2^200
x <- readLines('https://movie.douban.com/top250/')
x
goodlines = '<a href="/title[^>]*>(.*)</a>.*$|^ *\\$'
try = grep(goodlines,x,value=TRUE)
try
goodlines = '<span class=\"title\">'
try = grep(goodlines,x,value=TRUE)
try
goodlines = '<span class=\"title\">^\b</span>'
try = grep(goodlines,x,value=TRUE)
try
goodlines = '<span class=\"title\">\b</span>'
try = grep(goodlines,x,value=TRUE)
try
goodlines = '<span class=\"title\">'
try = grep(goodlines,x,value=TRUE)
try
name_en <- grep(try,'<span class=\"title\">&nbsp;/&nbsp;')
name_en <- grep(try,'&nbsp;/&nbsp',value=TRUE)
name_en = grep(try,'&nbsp;/&nbsp',value=TRUE)
grep(try,'&nbsp;/&nbsp',value=TRUE)
try
name_en = grep('&nbsp;/&nbsp',try,value=TRUE)
name_en
x
goodlines = '<span class=\"title\"[^>]*>(.*)</span>'
name_en <- grep(goodlines,try,value=TRUE)
name_en
goodlines = ' <span class=\"title\">&nbsp;/&nbsp;'
name_en <- grep(goodlines,try,value=TRUE)
name_en
try = sub('<span class=\"title\">&nbsp;/&nbsp;[^>]*>(.*)</a>.*$','\\1',name_en)
try
try = sub('<span class=\"title\">&nbsp;/&nbsp;[^>]*>(.*)</span>.*$','\\1',name_en)
try
try = sub('<span class=\"title\">&nbsp;/&nbsp;[^>]*>(.*)</span>'\\1',name_en)
try = sub('<span class=\"title\">&nbsp;/&nbsp;[^>]*>(.*)</span>,\\1',name_en)
try = sub('<span class=\"title\">&nbsp;/&nbsp;[^>]*>(.*)</span>',name_en)
try = sub('<span class=\"title\">&nbsp;/&nbsp',name_en)
try = sub('<span class=\"title\">&nbsp;/&nbsp','\\1',,name_en)
install.packages("tidyr")
install.packages("dplyr")
install.packages("tidyr")
install.packages("dplyr")
library(dplyr)
library(datasets)
library(stats)
data(airquality)
fit <- lm(Ozone  Ìƒ Wind + Temp + Solar.R, data = airquality)
fit <- lm(Ozone ~ Wind + Temp + Solar.R, data = airquality)
summary(fit)
airquality
class(airquality)
str(airquality)
str(airquality)
airquality
dim(airquality)
rnorm(dim(airquality)[1], 0, 1)
airquality_new <- cbind(rnorm(dim(airquality)[1], 0, 1),airquality)
airquality_new
Fake1          <- rnorm(dim(airquality)[1], 0, 1)
airquality_new <- cbind(Fake1,airquality)
airquality_new
airquality_new <- airquality
Fake1          <- rnorm(dim(airquality)[1], 0, 1)
airquality_new <- cbind(Fake1,airquality_new)
Fake2          <- rnorm(dim(airquality)[1], 0, 1)
airquality_new <- cbind(Fake2,airquality_new)
Fake3          <- rnorm(dim(airquality)[1], 0, 1)
airquality_new <- cbind(Fake3,airquality_new)
Fake4          <- rnorm(dim(airquality)[1], 0, 1)
airquality_new <- cbind(Fake4,airquality_new)
Fake5          <- rnorm(dim(airquality)[1], 0, 1)
airquality_new <- cbind(Fake5,airquality_new)
Fake6          <- rnorm(dim(airquality)[1], 0, 1)
airquality_new <- cbind(Fake6,airquality_new)
Fake7          <- rnorm(dim(airquality)[1], 0, 1)
airquality_new <- cbind(Fake7,airquality_new)
Fake8          <- rnorm(dim(airquality)[1], 0, 1)
airquality_new <- cbind(Fake8,airquality_new)
Fake9          <- rnorm(dim(airquality)[1], 0, 1)
airquality_new <- cbind(Fake9,airquality_new)
Fake10          <- rnorm(dim(airquality)[1], 0, 1)
airquality_new <- cbind(Fake10,airquality_new)
fit <- lm(Ozone ~ Fake1 + Fake2 + Fake3 + Fake4 + Fake5 +
Fake6 + Fake7 + Fake8 + Fake9 + Fake10, data = airquality)
summary(fit)
N              <- dim(airquality)[1]
Fake           <- array(dim=c(N,50))
airquality_new <- airquality
for(i in 1:50){
Fake[i,]     <- rnorm(N, 0, 1)
}
N              <- dim(airquality)[1]
Fake           <- array(dim=c(N,50))
airquality_new <- airquality
for(i in 1:50){
Fake[,i]     <- rnorm(N, 0, 1)
}
Fake
fit <- lm(Ozone ~ Fake1 + Fake2 + Fake3 + Fake4 + Fake5 +
Fake6 + Fake7 + Fake8 + Fake9 + Fake10, data = airquality_new)
summary(fit)
airquality_new <- cbind(airquality,Fake)
airquality_new
colnames(airquality_new)[7:56] = paste("Fake",seq(1,50))
airquality_new
N              <- dim(airquality)[1]
Fake           <- array(dim=c(N,50))
airquality_new <- airquality
for(i in 1:50){
Fake[,i]     <- rnorm(N, 0, 1)
}
airquality_new <- cbind(airquality,Fake)
colnames(airquality_new)[7:56] = paste("Fake",seq(1,50),sep="")
airquality_new
fit <- lm(Ozone ~ airquality_new[7:56])
fit <- lm(Ozone ~ airquality_new[7:56], data = airquality_new)
dim(airquality_new)
N              <- dim(airquality)[1]
Fake           <- array(dim=c(N,50))
airquality_new <- airquality
for(i in 1:50){
Fake[,i]     <- rnorm(N, 0, 1)
}
airquality_new <- cbind(airquality,Fake)
colnames(airquality_new)[7:56] = paste("Fake",seq(1,50),sep="")
fit <- lm(Ozone[1:10] ~ Fake1[1:10] + Fake2[1:10] +Fake3[1:10] +
Fake4[1:10] +Fake5[1:10]+ Fake6[1:10]+ Fake7[1:10]+ Fake8[1:10] +
Fake9[1:10]+ Fake10[1:10]+ Fake11[1:10]+ Fake12[1:10],
data = airquality_new)
summary(fit)
Ozone[1:10]
airquality_new$Ozone
fit <- lm(Ozone[1:10] ~ Fake1[1:10] + Fake2[1:10] +Fake3[1:10] +
Fake4[1:10] +Fake5[1:10]+ Fake6[1:10],
data = airquality_new)
summary(fit)
fit <- lm(Ozone[1:10] ~ Fake1[1:10] + Fake2[1:10] + Fake3[1:10] +
Fake4[1:10] +Fake5[1:10]+ Fake6[1:10] + Fake7[1:10] +
Fake8[1:10] +
data = airquality_new)
summary(fit)
fit <- lm(Ozone[1:10] ~ Fake1[1:10] + Fake2[1:10] + Fake3[1:10] +
Fake4[1:10] +Fake5[1:10]+ Fake6[1:10] + Fake7[1:10] +
Fake8[1:10],
data = airquality_new)
summary(fit)
fit <- lm(Ozone[1:10] ~ Fake1[1:10] + Fake2[1:10] + Fake3[1:10] +
Fake4[1:10] +Fake5[1:10]+ Fake6[1:10] + Fake7[1:10],
data = airquality_new)
summary(fit)
fit <- lm(Ozone[1:10] ~ Fake1[1:10] + Fake2[1:10] + Fake3[1:10] +
Fake4[1:10] +Fake5[1:10]+ Fake6[1:10],
data = airquality_new)
summary(fit)
N              <- dim(airquality)[1]
Fake           <- array(dim=c(N,6))
airquality_new <- airquality
for(i in 1:6){
Fake[,i]     <- rnorm(N, 0, 1)
}
airquality_new <- cbind(airquality,Fake)
colnames(airquality_new)[7:12] = paste("Fake",seq(1,6),sep="")
fit <- lm(Ozone[1:10] ~ Fake1[1:10] + Fake2[1:10] + Fake3[1:10] +
Fake4[1:10] +Fake5[1:10]+ Fake6[1:10],
data = airquality_new)
summary(fit)
airquality_new
N              <- dim(airquality)[1]
Fake           <- array(dim=c(N,6))
airquality_new <- airquality
for(i in 1:6){
Fake[,i]     <- rnorm(N, 0, 1)
}
airquality_new <- cbind(airquality,Fake)
colnames(airquality_new)[7:12] = paste("Fake",seq(1,6),sep="")
fit <- lm(Ozone[1:10] ~ Fake1[1:10] + Fake2[1:10] + Fake3[1:10] +
Fake4[1:10] +Fake5[1:10]+ Fake6[1:10],
data = airquality_new)
summary(fit)
N              <- dim(airquality)[1]
Fake           <- array(dim=c(N,6))
airquality_new <- airquality
for(i in 1:6){
Fake[,i]     <- rnorm(N, 0, 1)
}
airquality_new <- cbind(airquality,Fake)
colnames(airquality_new)[7:12] = paste("Fake",seq(1,6),sep="")
fit <- lm(Ozone[1:10] ~ Fake1[1:10] + Fake2[1:10] + Fake3[1:10] +
Fake4[1:10] +Fake5[1:10]+ Fake6[1:10],
data = airquality_new)
summary(fit)
N              <- dim(airquality)[1]
Fake           <- array(dim=c(N,6))
airquality_new <- airquality
for(i in 1:6){
Fake[,i]     <- rnorm(N, 0, 1)
}
airquality_new <- cbind(airquality,Fake)
colnames(airquality_new)[7:12] = paste("Fake",seq(1,6),sep="")
fit <- lm(Ozone[1:10] ~ Fake1[1:10] + Fake2[1:10] + Fake3[1:10] +
Fake4[1:10] +Fake5[1:10]+ Fake6[1:10],
data = airquality_new)
summary(fit)
N              <- dim(airquality)[1]
Fake           <- array(dim=c(N,6))
airquality_new <- airquality
for(i in 1:6){
Fake[,i]     <- rnorm(N, 0, 1)
}
airquality_new <- cbind(airquality,Fake)
colnames(airquality_new)[7:12] = paste("Fake",seq(1,6),sep="")
fit <- lm(Ozone[1:10] ~ Fake1[1:10] + Fake2[1:10] + Fake3[1:10] +
Fake4[1:10] +Fake5[1:10]+ Fake6[1:10],
data = airquality_new)
summary(fit)
N              <- dim(airquality)[1]
Fake           <- array(dim=c(N,6))
airquality_new <- airquality
for(i in 1:6){
Fake[,i]     <- rnorm(N, 0, 1)
}
airquality_new <- cbind(airquality,Fake)
colnames(airquality_new)[7:12] = paste("Fake",seq(1,6),sep="")
fit <- lm(Ozone[1:10] ~ Fake1[1:10] + Fake2[1:10] + Fake3[1:10] +
Fake4[1:10] +Fake5[1:10]+ Fake6[1:10],
data = airquality_new)
summary(fit)
N              <- dim(airquality)[1]
Fake           <- array(dim=c(N,6))
airquality_new <- airquality
for(i in 1:6){
Fake[,i]     <- rnorm(N, 0, 1)
}
airquality_new <- cbind(airquality,Fake)
colnames(airquality_new)[7:12] = paste("Fake",seq(1,6),sep="")
fit <- lm(Ozone[1:10] ~ Fake1[1:10] + Fake2[1:10] + Fake3[1:10] +
Fake4[1:10] +Fake5[1:10]+ Fake6[1:10],
data = airquality_new)
summary(fit)
N              <- dim(airquality)[1]
Fake           <- array(dim=c(N,6))
airquality_new <- airquality
for(i in 1:6){
Fake[,i]     <- rnorm(N, 0, 1)
}
airquality_new <- cbind(airquality,Fake)
colnames(airquality_new)[7:12] = paste("Fake",seq(1,6),sep="")
fit <- lm(Ozone[1:10] ~ Fake1[1:10] + Fake2[1:10] + Fake3[1:10] +
Fake4[1:10] +Fake5[1:10]+ Fake6[1:10],
data = airquality_new)
summary(fit)
N              <- dim(airquality)[1]
Fake           <- array(dim=c(N,6))
airquality_new <- airquality
for(i in 1:6){
Fake[,i]     <- rnorm(N, 0, 1)
}
airquality_new <- cbind(airquality,Fake)
colnames(airquality_new)[7:12] = paste("Fake",seq(1,6),sep="")
fit <- lm(Ozone[1:10] ~ Fake1[1:10] + Fake2[1:10] + Fake3[1:10] +
Fake4[1:10] +Fake5[1:10]+ Fake6[1:10],
data = airquality_new)
summary(fit)
N              <- dim(airquality)[1]
Fake           <- array(dim=c(N,6))
airquality_new <- airquality
for(i in 1:6){
Fake[,i]     <- rnorm(N, 0, 1)
}
airquality_new <- cbind(airquality,Fake)
colnames(airquality_new)[7:12] = paste("Fake",seq(1,6),sep="")
fit <- lm(Ozone[1:10] ~ Fake1[1:10] + Fake2[1:10] + Fake3[1:10] +
Fake4[1:10] +Fake5[1:10]+ Fake6[1:10],
data = airquality_new)
summary(fit)
N              <- dim(airquality)[1]
Fake           <- array(dim=c(N,6))
airquality_new <- airquality
for(i in 1:6){
Fake[,i]     <- rnorm(N, 0, 1)
}
airquality_new <- cbind(airquality,Fake)
colnames(airquality_new)[7:12] = paste("Fake",seq(1,6),sep="")
fit <- lm(Ozone[1:10] ~ Fake1[1:10] + Fake2[1:10] + Fake3[1:10] +
Fake4[1:10] +Fake5[1:10]+ Fake6[1:10],
data = airquality_new)
summary(fit)
library(MASS)
library(MASS)
data(Boston); #this data is in MASS package
colnames(Boston)
Boston
?MASS
??MASS
library(MASS)
data(Boston); #this data is in MASS package
str(Boston)
sample_index <- sample(nrow(Boston),nrow(Boston)*0.90)
sample_index
install.packages("leaps")
?regsubsets
??regsubsets
setwd("/data/ese5023")
read.csv("crop.data.csv", header=T)
crop_data <- read.csv("crop.data.csv", header=T)
crop_data_tbl <- as.tibble(crop_data)
library(dlpyr)
library(dplyr)
crop_data <- read.csv("crop.data.csv", header=T)
crop_data_tbl <- as.tibble(crop_data)
library(tidyr)
crop_data_tbl <- as.tibble(crop_data)
setwd("/data/ese5023")
install.packages("tidyr")
install.packages("dplyr")
install.packages("ggplot2")
crop_data <- read.csv("crop.data.csv", header=T)
crop_data_tbl <- as_tibble(crop_data)
setwd("/data/ese5023")
library(tidyr)
library(dplyr)
crop_data <- read.csv("crop.data.csv", header=T)
crop_data_tbl <- as_tibble(crop_data)
crop_data_tbl
crop_data$fertilizer
crop_data$block
crop_data$density
crop_data_tbl <- as_tibble(crop_data)
crop_data_tbl %>%
mutate(fertilizer = factor(fertilizer, ordered = TRUE))
crop_data_tbl
str(crop_data_tbl)
glimpse(crop_data_tbl)
crop_data_tbl <- as_tibble(crop_data)
crop_data_tbl %>%
select(-X) %>%
mutate(fertilizer = factor(fertilizer, ordered = TRUE))
glimpse(crop_data_tbl)
crop_data_tbl
crop_data_tbl$fertilizer=factor(crop_data_tbl$fertilizer, ordered = TRUE)
crop_data_tbl
setwd("/data/ese5023")
library(tidyr)
library(dplyr)
crop_data <- read.csv("crop.data.csv", header=T)
crop_data_tbl <- as_tibble(crop_data) %>%
mutate(fertilizer = factor(fertilizer, ordered = TRUE))
crop_data_tbl
crop_data <- read.csv("crop.data.csv", header=T)
crop_data_tbl <- as_tibble(crop_data) %>%
mutate(fertilizer = factor(fertilizer, ordered = TRUE)) %>%
mutate(block = factor(block, ordered = TRUE)) %>%
mutate(density = factor(density, ordered = TRUE))
crop_data
crop_data_tbl
levels(crop_data_tbl$fertilizer)
crop_data_tbl % > %
group_by(fertilizer) % > %
summarise(
count = n(),
mean_yield = mean(yield, na.rm = TRUE),
sd_yield = sd(yield, na.rm = TRUE)
)
crop_data_tbl %>%
group_by(fertilizer) %>%
summarise(
count = n(),
mean_yield = mean(yield, na.rm = TRUE),
sd_yield = sd(yield, na.rm = TRUE)
)
library(ggplot2)
ggplot(crop_data_tbl, aes(x = fertilizer, y = yield, fill = fertilizer)) +
geom_boxplot() +
geom_jitter(shape = 15,
color = "steelblue",
position = position_jitter(0.21)) +
theme_classic()
ggplot(crop_data_tbl, aes(x = fertilizer, y = yield, fill = fertilizer)) +
geom_boxplot() +
geom_jitter(shape = 15,
color = "red",
position = position_jitter(0.21)) +
theme_classic()
ggplot(crop_data_tbl, aes(x = fertilizer, y = yield, fill = fertilizer)) +
geom_boxplot() +
geom_jitter(shape = 15,
color = "black",
position = position_jitter(0.21)) +
theme_classic()
anova_one_way <- aov(yield ~ fertilizer, data = crop_data_tbl)
summary(anova_one_way)
anova_two_way <- aov(yield ~ fertilizer + block, data = df)
summary(anova_two_way)
anova_two_way <- aov(yield ~ fertilizer + block, data = crop_data_tbl)
summary(anova_two_way)
crop_data_tbl
glimpse(crop_data_tbl)
str(crop_data_tbl)
data(cpus)
cpus
data(cpus)
subset_result <- regsubsets(perf ~ syct + mmin + mmax + cach + chmin + chmax,
data = cpus, nvmax = 6)
plot(subset_result, scale="bic")
data(cpus)
library(leaps)
subset_result <- regsubsets(perf ~ syct + mmin + mmax + cach + chmin + chmax,
data = cpus, nvmax = 6)
plot(subset_result, scale="bic")
nullmodel=lm(perf ~ 1, data=subset_result)
fullmodel=lm(perf ~ ., data=subset_result)
model_step_b <- step(fullmodel,direction='backward')
nullmodel=lm(perf ~ 1, data=cpus)
fullmodel=lm(perf ~ ., data=cpus)
model_step_b <- step(fullmodel,direction='backward')
cpus
nullmodel=lm(perf ~ 1, data=cpus[2:9])
nullmodel
nullmodel=lm(perf ~ 1, data=cpus[2:9,])
nullmodel
nullmodel=lm(perf ~ 1, data=cpus[2:9,])
fullmodel=lm(perf ~ ., data=cpus[2:9,])
model_step_b <- step(fullmodel,direction='backward')
nullmodel=lm(perf ~ 1, data=cpus)
fullmodel=lm(perf ~ syct + mmin + mmax + cach + chmin + chmax, data=cpus)
model_step_b <- step(fullmodel,direction='backward')
# Forward Selection
model_step_f <- step(nullmodel, scope=list(lower=nullmodel, upper=fullmodel), direction='forward')
# Stepwise Selection
model_step_s <- step(nullmodel, scope=list(lower=nullmodel, upper=fullmodel), direction='both')
setwd("/data/ese5023")
