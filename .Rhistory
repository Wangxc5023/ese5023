exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
#
days_forecast  <- 60
days_in_plot   <- 30
forecast_15days <- forecast(model, days_forecast)
plot(forecast(model, days_forecast), include = days_in_plot, xlab="Time", ylab="log(global cases)",type="o",lwd=2)
#
days_forecast  <- 15
days_in_plot   <- 30
forecast_15days <- forecast(model, days_forecast)
plot(forecast(model, days_forecast), include = days_in_plot, xlab="Time", ylab="log(global cases)",type="o",lwd=2)
# 1st day
day_forward <- 1
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
#
days_forecast  <- 30
days_in_plot   <- 30
forecast_15days <- forecast(model, days_forecast)
plot(forecast(model, days_forecast), include = days_in_plot, xlab="Time", ylab="log(global cases)",type="o",lwd=2)
# 1st day
day_forward <- 1
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
yday(as.Date("2020-04-01"))
yday(as.Date("2020-11-30"))
# 1st day
day_forward <- yday(as.Date("2020-11-09")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
day_forward
# Nov 30
day_forward <- yday(as.Date("2020-11-30")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
day_forward
# COVID-19 daily cases
library(dplyr)
library(lubridate)
library(forecast)
setwd("/data/")
# Read in the data
COVID_data <- read.csv(file = "data.csv", header = T)
head(COVID_data)
library(dplyr)
library(lubridate)
library(forecast)
setwd("/data/")
# Read in the data
COVID_data <- read.csv(file = "data.csv", header = T)
head(COVID_data)
# Covert to tibble
COVID_tbl <- as_tibble(COVID_data)
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases, type="l")
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases, type="l",xlab="Date",ylab="Global cases")
# Only use data from Mar.
COVID_tbl <- COVID_tbl %>%
filter(dateRep >= as.Date("2020-04-01"))
# Convert to ts
Date_start <- as.Date("2020-04-01")
Date_end   <- as.Date("2020-11-08")
JD_start   <- yday(Date_start)
global_cases_ts <- ts(COVID_tbl$global_cases, start=c(2020,JD_start),frequency=365)
inds            <- seq(Date_start, Date_end, by = "day")
str(global_cases_ts)
plot(inds,global_cases_ts)
global_cases_ts_log <- log(global_cases_ts)
plot(inds,global_cases_ts_log)
acf(global_cases_ts_log)
pacf(global_cases_ts_log)
global_cases_ts_log_d1 <- diff(global_cases_ts_log)
plot(inds,global_cases_ts_log_d1)
acf(global_cases_ts_log_d1)
pacf(global_cases_ts_log_d1)
plot(inds,global_cases_ts)
global_cases_ts_log <- log(global_cases_ts)
plot(inds,global_cases_ts_log)
acf(global_cases_ts_log)
pacf(global_cases_ts_log)
global_cases_ts_log_d1 <- diff(global_cases_ts_log)
plot(inds,global_cases_ts_log_d1)
plot(global_cases_ts_log_d1)
plot(global_cases_ts)
acf(global_cases_ts_log_d1)
pacf(global_cases_ts_log_d1)
# Automated forecasting using an ARIMA model
model <- auto.arima(global_cases_ts_log)
#
days_forecast  <- 30
days_in_plot   <- 30
forecast_15days <- forecast(model, days_forecast)
plot(forecast(model, days_forecast), include = days_in_plot, xlab="Time", ylab="log(global cases)",type="o",lwd=2)
model
0.0092*30
install.packages("sp")
install.packages("sf")
install.packages("rgdal")
library(sp)
?Line()
matrix(runif(6), ncol=2)
ln <- Line(matrix(runif(6), ncol=2))
str(ln)
plot(ln)
ln
ln
lns <- Lines(list(ln), ID = "a") # this contains just one Line!
str(lns)
lns
sp_lns <- SpatialLines(list(lns))
str(sp_lns)
sp_lns
str(sp_lns)
plot(sp_lns)
ln <- Line(cnind(x,y))
ln <- Line(cbind(x,y))
x <- c(1,5,4,8)
y <- c(1,2,4,7)
ln <- Line(cbind(x,y))
str(ln)
lns <- Lines(list(ln), ID = "a") # this contains just one Line!
str(lns)
sp_lns <- SpatialLines(list(lns))
str(sp_lns)
plot(sp_lns)
sp_lns
data(meuse)
meuse
coordinates(meuse) = ~x+y
plot(meuse)
plot(meuse, pch=19, cex=1.5, col="red")
( soil.lab <- factor(meuse@data$soil, labels=c("red", "green", "blue")) )
plot(meuse, pch = 19, col = soil.lab)
plot(sp_lns)
plot(sp_lns, x=x, y=y)
plot(sp_lns)
dfr <- data.frame(id = "a", use = "road", cars_per_hour = 10) # note how we use the ID from above!
sp_lns_dfr <- SpatialLinesDataFrame(sp_lns, dfr, match.ID = "id")
str(sp_lns_dfr)
coordinates(sp_lns_dfr)
bbox(sp_lns_dfr)
proj4string(sp_lns_dfr)
CRS(sp_lns_dfr)
spplot(sp_lns_dfr)
spsample(sp_lns_dfr)
library(sf)
install.packages("sf")
install.packages("rgdal")
uninstall.package()
unstall.package()
uninstall.packages(rgdal)
uninstall.packages(rgdal)
uninstall.packages("rgdal")
install.packages("rgdal")
install.packages("rgdal")
library(rgdal)
install.packages("sf")
library(sf)
library(rgdal)
install.packages("raster")
library(raster)
lnstr_sfg <- st_linestring(cbind(x,y))
library(sp)
x <- c(1,5,4,8)
y <- c(1,2,4,7)
library(sf)
library(rgdal)
library(raster)
lnstr_sfg <- st_linestring(cbind(x,y))
class(lnstr_sfg)
lnstr_sfg
str(lnstr_sfg)
(lnstr_sfc <- st_sfc(lnstr_sfg))
lnstr_sfc <- st_sfc(lnstr_sfg)
lnstr_sfc
str(lnstr_sfc)
dfr <- data.frame(id = "a", use = "road", cars_per_hour = 10) # note how we use the ID from above!
dfr
lnstr_sf <- st_sf(dfr , lnstr_sfc)
lnstr_sf
str(lnstr_sf)
plot(lnstr_sf)
x <- c(1,5,4,8)
y <- c(1,2,4,7)
ln <- Line(cbind(x,y))
str(ln)
lns <- Lines(list(ln), ID = "a") # this contains just one Line!
str(lns)
sp_lns <- SpatialLines(list(lns))
str(sp_lns)
plot(sp_lns)
dfr <- data.frame(id = "a", use = "road", cars_per_hour = 10) # note how we use the ID from above!
sp_lns_dfr <- SpatialLinesDataFrame(sp_lns, dfr, match.ID = "id")
str(sp_lns_dfr)
sp_lns_dfr
plot(sp_lns_dfr)
lnstr_sf
plot(lnstr_sf)
plot(sp_lns_dfr)
ph_df <- read.csv("/data/test.csv")
ph_df <- read.csv("/data/test.csv")
head(ph_df)
class(ph_df)
ph_sf <- st_as_sf(ph_df , coords = c("lon", "lat"))
class(ph_sf)
ph_sf
plot(ph_sf)
# sf
coordinates(ph_df) <- c("lon", "lat")
class(ph_df) # !!
plot(ph_df)
library(rgdal)
library(rgdal)
China_map <- readOGR("/data/China_map", "bou2_4p")
China_map
summary(China_map)
summary(China_map)
class(China_map)
names(China_map)
head(China_map)
plot(China_map)
philly_rich <- subset(China_map, ADCODE99 > 440000)
plot(philly_rich, add=T, col="red")
philly_rich <- subset(China_map, AREA > 100)
plot(philly_rich, add=T, col="red")
plot(China_map)
philly_rich <- subset(China_map, AREA > 100)
plot(philly_rich, add=T, col="red")
philly_rich1 <- subset(China_map, AREA < 30)
plot(philly_rich1, add=T, col="blue")
library(rgdal)
China_map <- readOGR("/data/China_map", "bou2_4p")
summary(China_map)
summary(China_map)
class(China_map)
names(China_map)
head(China_map)
plot(China_map)
philly_rich <- subset(China_map, AREA > 100)
plot(philly_rich, add=T, col="red")
philly_rich1 <- subset(China_map, AREA < 20)
plot(philly_rich1, add=T, col="blue")
library(rgdal)
China_map <- readOGR("/data/China_map", "bou2_4p")
summary(China_map)
summary(China_map)
class(China_map)
names(China_map)
head(China_map)
plot(China_map)
philly_rich <- subset(China_map, AREA > 100)
plot(philly_rich, add=T, col="red")
philly_rich1 <- subset(China_map, AREA < 10)
plot(philly_rich1, add=T, col="blue")
# read in
philly_sf <- st_read("/data/China_map")
# take a look at what we've got
names(philly_sf)
# note the added geometry column, as compared to:
names(philly)
# note the added geometry column, as compared to:
names(China_map)
# plot works differently here:
plot(philly_sf)
# to do the same as above we need to directly print the geometry column
st_geometry(philly_sf)        # use this method to retreive geometry
# subset the familar way
philly_sf_rich <- subset(philly_sf, AREA > 100)
plot(st_geometry(philly_sf_rich), add=T, col="red")
library(rgdal)
China_map <- readOGR("/data/China_map", "bou2_4p")
summary(China_map)
summary(China_map)
class(China_map)
names(China_map)
head(China_map)
plot(China_map)
philly_rich <- subset(China_map, AREA > 100)
plot(philly_rich, add=T, col="red")
philly_rich1 <- subset(China_map, AREA < 10)
plot(philly_rich1, add=T, col="blue")
gtopo <- GridTopology(c(0,0), c(1,1), c(5,5)) # create the grid
datafr <- data.frame(runif(25)) # make up some data
SpGdf <- SpatialGridDataFrame(gtopo, datafr) # create the grid data frame
summary(SpGdf)
SpGdf
r <- raster(xmn=-0.5, ymn=-0.5, xmx=4.5, ymx=4.5, resolution=c(1,1))
r
plot(r)
r <- setValues(r, seq(1,25,by=1))
class(r)
plot(r); points(coordinates(r), pch=3)
contour(r)
# Read a raster
# load raster in an R object called 'DEM'
DEM <- raster("/home/lei/Downloads/LC08_L1TP_122044_20200828_20200905_01_T1/LC08_L1TP_122044_20200828_20200905_01_T1_B8.TIF")
# look at the raster attributes.
DEM
plot(DEM)
# Read a raster
# load raster in an R object called 'DEM'
DEM <- raster("/home/lei/Downloads/chn_ppp_2020_1km_Aggregated_UNadj.tif")
# look at the raster attributes.
DEM
plot(DEM)
plot(China_map, add=T, lwd=0.5)
China_map
plot(DEM)
# Read a raster
# load raster in an R object called 'DEM'
DEM <- raster("/home/lei/Downloads/wc2.1_10m_wind/wc2.1_10m_wind_11.tif")
# look at the raster attributes.
DEM
plot(DEM)
plot(DEM)
contour(DEM)
plot(DEM)
DEM
DEM
hist(DEM, main="Distribution of wind speed")
plot(DEM,
main="Global wind speed")
image(DEM)
col <- terrain.colors(5)
image(DEM,  main="Digital Elevation Model (DEM)", col=col)
#plot the DEM
plot(DEM)
#Define the extent of the crop by clicking on the plot
cropbox1 <- drawExtent()
#crop the raster, then plot the new cropped raster
DEMcrop1 <- crop(DEM, cropbox1)
#plot the cropped extent
plot(DEMcrop1)
#define the crop extent
cropbox2 <-c(100,110,20,30)
#crop the raster
DEMcrop2 <- crop(DEM, cropbox2)
DEMcrop2
#plot cropped DEM
plot(DEMcrop2)
col <- terrain.colors(20)
image(DEM,  main="Digital Elevation Model (DEM)", col=col)
DEMcrop2 <- crop(DEM, cropbox2)
#plot cropped DEM
plot(DEMcrop2)
#define the crop extent
cropbox2 <-c(100,110,10,30)
#crop the raster
DEMcrop2 <- crop(DEM, cropbox2)
#plot cropped DEM
plot(DEMcrop2)
#define the crop extent
cropbox2 <-c(100,120,10,30)
#crop the raster
DEMcrop2 <- crop(DEM, cropbox2)
#plot cropped DEM
plot(DEMcrop2)
#define the crop extent
cropbox2 <-c(110,130,10,30)
#crop the raster
DEMcrop2 <- crop(DEM, cropbox2)
#plot cropped DEM
plot(DEMcrop2)
#define the crop extent
cropbox2 <-c(100,130,10,30)
#crop the raster
DEMcrop2 <- crop(DEM, cropbox2)
#plot cropped DEM
plot(DEMcrop2)
ln <- Points((matrix(runif(6), ncol=2)))
ln <- Point((matrix(runif(6), ncol=2)))
class(ph_sf)
ph_df <- read.csv("/data/test.csv")
head(ph_df)
class(ph_df)
ph_sf <- st_as_sf(ph_df , coords = c("lon", "lat"))
class(ph_sf)
plot(ph_sf)
library("sp")
library("rgdal")
library("sf")
library("raster")
ph_sf <- st_as_sf(ph_df , coords = c("lon", "lat"))
class(ph_sf)
plot(ph_sf)
?st_as_sf
x <- c(1,5,4,8)
y <- c(1,2,4,7)
ln <- Line(cbind(x,y))
str(ln)
x <- c(1,2,2,1)
y <- c(1,1,2,2)
ln <- Line(cbind(x,y))
str(ln)
lns <- Lines(list(ln), ID = "a") # this contains just one Line!
str(lns)
plot(sp_lns)
sp_lns <- SpatialLines(list(lns))
str(sp_lns)
plot(sp_lns)
Pol <- Polygon(cbind(x,y))
Pol <- Polygon(cbind(x,y))
str(Pol)
Pols <- Polygons(list(Pol), ID = "b") # this contains just one Line!
str(Pols)
sp_pols <- SpatialPolygons(list(Pols))
sp_pols <- SpatialPolygons(list(Pols))
str(sp_pols)
plot(sp_pols)
sp_pols
Pols
Poi <- cbind(x,y)
str(Poi)
sp_pois <- SpatialPoints(list(Poi))
str(sp_pois)
plot(sp_pois)
x <- c(1, 2, 3, 2, 1.5, 1)
y <- c(1, 1, 1.5, 2, 3, 2)
ln <- Line(cbind(x,y))
str(ln)
lns <- Lines(list(ln), ID = "a") # this contains just one Line!
str(lns)
sp_lns <- SpatialLines(list(lns))
str(sp_lns)
plot(sp_lns)
Pol <- Polygon(cbind(x,y))
str(Pol)
Pols <- Polygons(list(Pol), ID = "b") # this contains just one Line!
str(Pols)
sp_pols <- SpatialPolygons(list(Pols))
str(sp_pols)
plot(sp_pols)
x1 <- c(1, 2, 3, 2, 1.5, 1)
y1 <- c(1, 1, 1.5, 2, 3, 2)
x2 <- c(1, 3, 3)
y2 <- c(1, 1, 3)
ln1 <- Line(cbind(x1,y1))
str(ln1)
ln2 <- Line(cbind(x2,y2))
str(ln2)
lns <- Lines(list(ln1,ln2), ID = "a") # this contains just one Line!
str(lns)
# Set up the basic points
x <- c(1, 2, 3, 2, 1.5, 1)
y <- c(1, 1, 1.5, 2, 3, 2)
# Create a Line object
MyLine <- Line(cbind(x,y))
str(MyLine)
# Create a Lines object
MyLines <- Lines(list(MyLine), ID = "Line_a") # this contains just one Line!
str(MyLines)
# Create a Polygon object
MyPolygon <- Polygon(cbind(x,y))
str(MyPolygon)
# Create a Polygons object
MyPolygons <- Polygons(list(MyPolygon), ID = "Polygon_a") # this contains just one Line!
str(MyPolygons)
?writeOGR
writeOGR(MyPolygons_sp_dfr, "MyPolygons")
MyPolygons_sp_dfr
MyPolygons
getwd()
China_map <- readOGR("/data/China_map", "bou2_4p")
summary(China_map)
class(China_map)
names(China_map)
head(China_map)
plot(China_map)
?subset
# specify the grid topology with the following parameters:
# - the smallest coordinates for each dimension, here: 0,0
# - cell size in each dimension, here: 1,1
# - number of cells in each dimension, here: 5,5
gtopo <- GridTopology(c(0,0), c(1,1), c(5,5)) # create the grid
datafr <- data.frame(runif(25)) # make up some data
SpGdf <- SpatialGridDataFrame(gtopo, datafr) # create the grid data frame
summary(SpGdf)
?writeGDAL
contour(r)
# specify the RasterLayer with the following parameters:
# - minimum x coordinate (left border)
# - minimum y coordinate (bottom border)
# - maximum x coordinate (right border)
# - maximum y coordinate (top border)
# - resolution (cell size) in each dimension
r <- raster(xmn=-0.5, ymn=-0.5, xmx=4.5, ymx=4.5, resolution=c(1,1))
r
class(r)
r <- setValues(r, seq(1,25,by=1))
class(r)
plot(r); points(coordinates(r), pch=3)
contour(r)
writeGDAL(dataset = r, fname = "/data/MyRaster")
?writeGDAL
class(volcano)
volcano.r <- raster(volcano)
class(volcano.r)
plot(volcano.r)
setwd("/data/ese5023")
rmarkdown::render_site()
install.packages("astsa")
