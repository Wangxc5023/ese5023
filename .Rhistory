1 + 1
1
2 * 2
(1 + 2) * 2
x <- all.equal(1, 1+1e-5)
x
print(x)
if(x){print(1)}
installed.packages(dplyr)
installed.packages(tidyr)
# Define the function FindTop()
FindTop        <- function(N){
MoviePage  <- readLines('https://movie.douban.com/top250', encoding='UTF-8')
Pattarn    <- '<span class=\"title\">&nbsp;/&nbsp;([^<]*)</span>'
Lines      <- grep(Pattarn, MoviePage, value=TRUE)
Lines      <- sub(Pattarn,  '\\1', Lines )
Names      <- sub('^ *', '', Lines)
Names      <- sub('&#39;', "'", Names)
print(Names[1:N])
}
# Call the function with arguement 5 and 10
FindTop(5)
FindTop(10)
FindTop(25)
which(1==1)
which(1==1 && 2==2)
which(x==1 && x==2)
x <- seq(1,10,1)
which(x==1 && x==2)
x==1
library(ggplot2)
# COVID-19 daily cases
library(dplyr)
library(lubridate)
library(forecast)
# Read in the data
COVID_data <- read.csv(file = "D://class/data.csv", header = T)
head(COVID_data)
# Covert to tibble
COVID_tbl <- as_tibble(COVID_data)
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases, type="l",xlab="Date",ylab="Global cases")
# Only use data from Mar.
COVID_tbl <- COVID_tbl %>%
filter(dateRep >= as.Date("2020-04-01"))
# Convert to ts
# Start date of the time series, read from the .csv file
Date_start <- as.Date("2020-04-01")
# End date of the time series, read from the .csv file
Date_end   <- as.Date("2020-11-08")
# Get the Julian Day of the end date
JD_start   <- yday(Date_start)
# Convert the vector data to a time series
global_cases_ts <- ts(COVID_tbl$global_cases, start=c(2020,JD_start),frequency=365)
# The indicator of the time series
inds            <- seq(Date_start, Date_end, by = "day")
str(global_cases_ts)
plot(inds,global_cases_ts)
global_cases_ts_log <- log(global_cases_ts)
plot(inds,global_cases_ts_log)
acf(global_cases_ts_log)
pacf(global_cases_ts_log)
global_cases_ts_log_d1 <- diff(global_cases_ts_log)
plot(global_cases_ts_log_d1)
acf(global_cases_ts_log_d1)
pacf(global_cases_ts_log_d1)
# Automated forecasting using an ARIMA model
model <- auto.arima(global_cases_ts_log)
#
days_forecast  <- 30
days_in_plot   <- 30
forecast_15days <- forecast(model, days_forecast)
plot(forecast(model, days_forecast), include = days_in_plot, xlab="Time", ylab="log(global cases)",type="o",lwd=2)
forecast_15days
# Read in the data
COVID_data2 <- read.csv(file = "D://class/data.csv", header = T)
COVID_tbl2 <- as_tibble(COVID_data2)
# Get global daily new cases
COVID_tbl2 <- COVID_tbl2 %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
COVID_tbl2
tail(COVID_tbl2)
day_forward <- yday(as.Date("2020-11-09")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
(500064-462259)/462259
(500064-462259)/462259*100
# COVID-19 daily cases
library(dplyr)
library(lubridate)
library(forecast)
# Read in the data
COVID_data <- read.csv(file = "D://class/data_20201108.csv", header = T)
head(COVID_data)
# Covert to tibble
COVID_tbl <- as_tibble(COVID_data)
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases, type="l",xlab="Date",ylab="Global cases")
# Only use data from April 01
COVID_tbl <- COVID_tbl %>%
filter(dateRep >= as.Date("2020-04-01"))
# Convert to ts
# Start date of the time series, read from the .csv file
Date_start <- as.Date("2020-04-01")
# End date of the time series, read from the .csv file
Date_end   <- as.Date("2020-11-08")
# Get the Julian Day of the end date
JD_start   <- yday(Date_start)
# Convert the vector data to a time series
global_cases_ts <- ts(COVID_tbl$global_cases, start=c(2020,JD_start),frequency=365)
# The indicator of the time series
inds            <- seq(Date_start, Date_end, by = "day")
# Check structure
str(global_cases_ts)
# Plot time series
plot(inds,global_cases_ts)
# Data transform with log
global_cases_ts_log <- log(global_cases_ts)
plot(inds,global_cases_ts_log)
acf(global_cases_ts_log)
pacf(global_cases_ts_log)
global_cases_ts_log_d1 <- diff(global_cases_ts_log)
plot(global_cases_ts_log_d1)
acf(global_cases_ts_log_d1)
pacf(global_cases_ts_log_d1)
# Automated forecasting using an ARIMA model
model <- auto.arima(global_cases_ts_log)
#
days_forecast  <- 15
days_in_plot   <- 30
forecast_15days <- forecast(model, days_forecast)
plot(forecast(model, days_forecast), include = days_in_plot, xlab="Time", ylab="log(global cases)",type="o",lwd=2)
# 1st day
day_forward <- yday(as.Date("2020-11-09")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# Nov 30
day_forward <- yday(as.Date("2020-11-30")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# Read in the data
COVID_data2 <- read.csv(file = "D://class/data.csv", header = T)
COVID_tbl2 <- as_tibble(COVID_data2)
# Get global daily new cases
COVID_tbl2 <- COVID_tbl2 %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
tail(COVID_tbl2)
# Nov. 09:
# Predicted value: 500,064 (455,177, 549,378)
# Real value: 462,259
# Relative bias: 8.2%
model
setwd("C://ese5023")
rmarkdown::render_site()
